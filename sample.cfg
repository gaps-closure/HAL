// An example configuration file for the CLOSURE HAL service

// List of HAL interfaces. Only the first 5 parameters are required;
// optional parameters are set if needed for that interface type.
devices = 
(
 {
   // HAL - Application API
   enabled      = 1;
   id           = "hal1";
   path         = "./zc/zc";
   model        = "pkt_c";
   comms        = "ipc";
   mode_in      = "sub";
   mode_out     = "pub";
 },
 {
    // Network Serial Port
    enabled      = 1;
    id           = "xdd1";
    path         = "/dev/vcom1";
    model        = "pkt_m2";
    comms        = "tty";
  },
  {
    // Second Network Serial Port (disabled)
    enabled      = 0;
    id           = "xdd2";
    path         = "/dev/vcom2";
    model        = "pkt_m1";
    comms        = "tty";
  },
  {
    // UDP Network connetion (using localhost for testing)
    // Both CDG and HAL are listening (on separate ports)
    enabled      = 1;
    id           = "xdd3";
    path         = "lo";
    model        = "pkt_g1";
    comms        = "udp";
    addr_out     = "127.0.0.1";    // address of listener on Cross Domain Gateway
    port_out     = 6789;           // port of listener on Cross Domain Gateway
    addr_in      = "127.0.0.1";    // address of listener on HAL
    port_in      = 6788;           // port of listener on HAL
  },
  {
    // TCP Network connetion (using localhost for testing)
    // CDG is a listening server; HAL is as client
    // (replace _out with _in to reverse roles)
    enabled      = 1;
    id           = "xdd4";
    path         = "lo";
    model        = "pkt_g1";
    comms        = "tcp";
    addr_out     = "127.0.0.1";
    port_out     = 6787;
  }
)

// Routing Maps for HAL (based on exact match of from_ information)
maps =
(
  {
    // Routing from Application to Network
    from_dev = "hal1";
    from_mux = 1;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd1";
    to_mux   = 1;
    to_sec   = 3;
    to_typ   = 1;
    // from_tag = [1, 2, 1];
    // to_tag   = [2, 3, 1];
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "hal1";
    from_mux = 2;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd1";
    to_mux   = 2;
    to_sec   = 42;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "hal1";
    from_mux = 3;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd3";
    to_mux   = 3;
    to_sec   = 42;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "hal1";
    from_mux = 4;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd4";
    to_mux   = 4;
    to_sec   = 40;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    // Routing from Network to Application
    from_dev = "xdd1";
    from_mux = 1;
    from_sec = 1;
    from_typ = 1;
    to_dev   = "hal1";
    to_mux   = 1;
    to_sec   = 7;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "xdd1";
    from_mux = 2;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "hal1";
    to_mux   = 2;
    to_sec   = 31;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "xdd3";
    from_mux = 3;
    from_sec = 0;         /* 0 is a don't care */
    from_typ = 0;         /* 0 is a don't care */
    to_dev   = "hal1";
    to_mux   = 3;
    to_sec   = 66;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "xdd4";
    from_mux = 4;
    from_sec = 0;         /* 0 is a don't care */
    from_typ = 0;         /* 0 is a don't care */
    to_dev   = "hal1";
    to_mux   = 4;
    to_sec   = 33;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  }
)
