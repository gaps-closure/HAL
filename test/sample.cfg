// An example configuration file for the GAPS HAL service to support
// multiple communication patterns between multiple Applicaitons and
// Cross Domain Gateways (CDGs)

// List of HAL interfaces.
// Only the first 5 parameters are required;
// optional parameters are used only for certain interface types.
devices = 
(
  {
   // xdd0: HAL-Application Link
   enabled      = 1;
   id           = "xdd0";
   path         = "./zc/zc";                  // ZCAT command
   model        = "sdh_ha_v1";                // HAL Packet format
   comms        = "ipc";                      // Unix IPC socket
   mode_in      = "sub";                      // ZMQ subscriber from APP
   mode_out     = "pub";                      // ZMQ publisher to APP
   // network addresses are defined by xdcomms API
  },
  {
    // xdd1: HAL-CDG Link (Emulated or testing)
    enabled      = 1;
    id           = "xdd1";
    path         = "/dev/vcom1";              // April 2020 compressed header
    model        = "sdh_be_v1";               // BE: April 2020 packet model
    comms        = "tty";                     // Bidiretional Serial Port
    // network addresses/ports are defined by network emulator
  },
  {
    // xdd2: HAL-CDG Link (Emulated or testing)
    enabled      = 0;
    id           = "xdd2";
    path         = "/dev/vcom1";              // April 2020 compressed header
    model        = "sdh_be_v2";               // 2019 packet model (no timestamps)
    comms        = "tty";                     // Bidiretional Serial Port
    // network addresses/ports are defined by network emulator
  },
  {
    // xdd3: HAL-CDG Link  (Emulated or testing)
    enabled      = 1;
    id           = "xdd3";
    path         = "lo";                      // localhost for testing
    model        = "sdh_bw_v1";               // April 2020 compressed header
    comms        = "udp";                     // Emulated UDP network connetion
    addr_out     = "127.0.0.1";               // address of listener on CDG
    port_out     = 50000;                     // port of listener on CDG
    addr_in      = "127.0.0.1";               // address of listener on HAL
    port_in      = 6788;                      // port of listener on HAL
  },
  {
    // xdd4: HAL-CDG Link (Emulated or testing)
    // (replace _out with _in to reverse listener roles)
    enabled      = 1;
    id           = "xdd4";
    path         = "lo";                      // localhost for testing
    model        = "sdh_bw_v1";               // April 2020 compressed header
    comms        = "tcp";                     // Emulated TCP network connetion
    addr_out     = "127.0.0.1";               // address of listener on CDG
    port_out     = 6787;                      // port of listener on CDG
    // reverse direction uses reverse path from CDG to HAL
  },
  {
    // xdd6: HAL-CDG Link (1 of 2 Levels)
    enabled      = 1;
    id           = "xdd6";
    path         = "/dev/gaps_ilip_0_root";   // ILIP root device for setup
    model        = "sdh_be_v1";               // BE: April 2020 packet model
    comms        = "ilp";                     // ILIP using unidirectional devices
    path_r       = "/dev/gaps_ilip_1_read";   // ILIP device where HAL reads data
    path_w       = "/dev/gaps_ilip_1_write";  // ILIP device where HAL writes data
    from_mux     = 1;                         // Application 'from_mux' ID
    // network addresses/ports are defined by network emulator
  },
  {
    // xdd7: HAL-CDG Link (2 of 2 Levels)
    enabled      = 1;
    id           = "xdd7";
    path         = "/dev/gaps_ilip_0_root";   // ILIP root device for setup
    model        = "sdh_be_v1";               // BE: April 2020 packet model
    comms        = "ilp";                     // ILIP using unidirectional devices
    path_r       = "/dev/gaps_ilip_2_read";   // ILIP device where HAL reads data
    path_w       = "/dev/gaps_ilip_2_write";  // ILIP device where HAL writes data
    from_mux     = 2;                         // Application 'from_mux' ID
    // network addresses/ports are defined by network emulator
  }
)

// HAL Routing Maps
maps =
(
  // MUX 1 for Enclave Orange writing POSITION (t=1) to xdd6 loopback device
  {
    from_dev = "xdd0";
    from_mux = 1;
    from_sec = 1;
    from_typ = 1;
    to_dev   = "xdd6";
    to_mux   = 1;
    to_sec   = 1;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 1 for Enclave Purple reading POSITION (t=1) from xdd6 loopback device
  {
    from_dev = "xdd6";
    from_mux = 1;
    from_sec = 1;
    from_typ = 1;
    to_dev   = "xdd0";
    to_mux   = 1;
    to_sec   = 1;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 2 for Enclave Purple writing POSITION (t=1) to xdd7 loopback device
  // TODO: Does not work, since xdd7 only accepts data typ = 2
  {
    from_dev = "xdd0";
    from_mux = 2;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd7";
    to_mux   = 2;
    to_sec   = 2;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 2 for Enclave Orange reading POSITION (t=1) from xdd7 loopback device
  // TODO: Does not work, since xdd7 only accepts data typ = 2
  {
    from_dev = "xdd7";
    from_mux = 2;
    from_sec = 2;
    from_typ = 1;
    to_dev   = "xdd0";
    to_mux   = 2;
    to_sec   = 2;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 2 for Enclave Purple writing DISTANCE (t=2) to xdd7 loopback device
  {
    from_dev = "xdd0";
    from_mux = 2;
    from_sec = 2;
    from_typ = 2;
    to_dev   = "xdd7";
    to_mux   = 2;
    to_sec   = 2;
    to_typ   = 2;
    codec    = "NULL";
  },
  // MUX 2 for Enclave Orange reading DISTANCE (t=2) from xdd7 loopback device
  {
    from_dev  = "xdd7";
    from_mux  = 2;
    from_sec  = 2;
    from_typ  = 2;
    to_dev    = "xdd0";
    to_mux    = 2;
    to_sec    = 2;
    to_typ    = 2;
    codec     = "NULL";
  },
  // MUX 11 for Enclave Orange writing POSITION (t=1) to xdd3 UDP INET device
  {
    from_dev  = "xdd0";
    from_mux  = 11;
    from_sec  = 11;
    from_typ  = 1;
    to_dev    = "xdd3";
    to_ctag   = 65793;                         // compressed tag = 0x00010101
    codec     = "NULL";                        // no adu transform in HAL
  },
  // MUX 11 for Enclave Purple reading POSITION (t=1) from xdd3 UDP INET device
  {
    from_dev  = "xdd3";
    from_ctag = 65793;                        // compressed tag = 0x00010101
    to_dev    = "xdd0";
    to_mux    = 11;
    to_sec    = 11;
    to_typ    = 1;
    codec     = "NULL";
  },
  // MUX 12 for Enclave Purple writing POSITION (t=1) to xdd3 UDP INET device
  {
    from_dev  = "xdd0";
    from_mux  = 12;
    from_sec  = 12;
    from_typ  = 1;
    to_dev    = "xdd3";
    to_ctag   = 131585;                        // compressed tag = 0x00020201
    codec     = "NULL";                        // no adu transform in HAL
  },
  // MUX 12 for Enclave Orange reading POSITION (t=1) from xdd3 UDP INET device
  {
    from_dev  = "xdd3";
    from_ctag = 131585;                        // compressed tag = 0x00010101
    to_dev    = "xdd0";
    to_mux    = 12;
    to_sec    = 12;
    to_typ    = 1;
    codec     = "NULL";
  },
  // MUX 13 for Enclave Purple writing DISTANCE (t=2) to xdd3 UDP INET device
  {
    from_dev  = "xdd0";
    from_mux  = 13;
    from_sec  = 13;
    from_typ  = 2;
    to_dev    = "xdd3";
    to_ctag   = 197377;                        // compressed tag = 0x00030302
    codec     = "NULL";                        // no adu transform in HAL
  },
  // MUX 13 for Enclave Orange reading DISTANCE (t=2) from xdd3 UDP INET device
  {
    from_dev  = "xdd3";
    from_ctag = 197377;                        // compressed tag = 0x00010101
    to_dev    = "xdd0";
    to_mux    = 13;
    to_sec    = 13;
    to_typ    = 2;
    codec     = "NULL";
  },
    // 723713;                        // compressed tag = 0x000b0b01
 // 789505;                       // compressed tag = 0x000c0c01
// 855297;                        // compressed tag = 0x000d0d01
// 921089;                       // compressed tag = 0x000e0e01
// 986882;                        // compressed tag = 0x000f0f02
// 1052674;                       // compressed tag = 0x00101002
  // MUX 101 for Enclave Orange writing PNT (t=101) to xdd6 loopback device
  {
    from_dev = "xdd0";
    from_mux = 101;
    from_sec = 1;
    from_typ = 101;
    to_dev   = "xdd6";
    to_mux   = 1;
    to_sec   = 1;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 101 for Enclave Purple reading PNT (t=101) from xdd6 loopback device
  {
    from_dev = "xdd6";
    from_mux = 1;
    from_sec = 1;
    from_typ = 1;
    to_dev   = "xdd0";
    to_mux   = 101;
    to_sec   = 1;
    to_typ   = 101;
    codec    = "NULL";
  },
  // MUX 102 for Enclave Purple writing XYZ (t=102) to xdd7 loopback device
  {
    from_dev = "xdd0";
    from_mux = 102;
    from_sec = 2;
    from_typ = 102;
    to_dev   = "xdd7";
    to_mux   = 2;
    to_sec   = 2;
    to_typ   = 2;
    codec    = "NULL";
  },
  // MUX 102 for Enclave Orange reading XYZ (t=102) from xdd7 loopback device
  {
    from_dev = "xdd7";
    from_mux = 2;
    from_sec = 2;
    from_typ = 2;
    to_dev   = "xdd0";
    to_mux   = 102;
    to_sec   = 2;
    to_typ   = 102;
    codec    = "NULL";
  },
  // MUX 73 for Enclave Purple writing POSITION (t=1) to xdd3 TCP INET device
  {
    from_dev = "xdd0";
    from_mux = 73;
    from_sec = 73;
    from_typ = 1;
    to_dev   = "xdd4";
    to_ctag  = 855297;                        // compressed tag = 0x000d0d01
    codec    = "NULL";
  },
  {
    from_dev = "xdd4";
    from_ctag = 921089;                       // compressed tag = 0x000e0e01
    to_dev   = "xdd0";
    to_mux   = 74;
    to_sec   = 74;
    to_typ   = 1;
    codec    = "NULL";
  },
  // MUX 05 for writing to, and MUX 06 for reading from xdd1 device
  {
    from_dev = "xdd0";
    from_mux = 5;
    from_sec = 5;
    from_typ = 1;
    to_dev   = "xdd1";
    to_mux   = 5;
    to_sec   = 5;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "xdd1";
    from_mux = 6;
    from_sec = 6;
    from_typ = 1;
    to_dev   = "xdd0";
    to_mux   = 6;
    to_sec   = 6;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  // MUX 07 for writing to, and MUX 08 for reading from xdd1 device
  {
    from_dev = "xdd0";
    from_mux = 7;
    from_sec = 7;
    from_typ = 1;
    to_dev   = "xdd1";
    to_mux   = 7;
    to_sec   = 7;
    to_typ   = 1;
    codec    = "NULL";        /* no adu transform in HAL */
  },
  {
    from_dev = "xdd1";
    from_mux = 8;
    from_sec = 8;
    from_typ = 1;
    to_dev   = "xdd0";
    to_mux   = 8;
    to_sec   = 8;
    to_typ   = 1;
    codec    = "NULL";
  }
)
